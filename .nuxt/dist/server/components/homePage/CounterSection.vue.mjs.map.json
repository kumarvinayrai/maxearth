{"file":"CounterSection.vue.mjs","mappings":";;;;;;;AA8BA,UAAM,WAAW,SAAS,EAAE;AACJ,QAAI,EAAE;;;;;;;;;;;;;;;;;","names":[],"sources":["../../../../../components/homePage/CounterSection.vue"],"sourcesContent":["<template>\r\n  <section class=\"counter-area py-120\">\r\n    <div class=\"container\">\r\n      <div class=\"row g-4\">\r\n        <div\r\n          v-for=\"(counter, index) in counters\"\r\n          :key=\"`counter-${index}`\"\r\n          class=\"col-6 col-lg-3\"\r\n        >\r\n          <div\r\n            class=\"counter-box text-center p-3 h-100\"\r\n            ref=\"counterElements\"\r\n          >\r\n            <div class=\"icon\">\r\n              <i :class=\"counter.iconClass\"></i>\r\n            </div>\r\n            <div>\r\n              <span class=\"counter\">{{ counter.current }}</span>\r\n              <h6 class=\"title\">{{ counter.title }}</h6>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </section>\r\n</template>\r\n\r\n<script setup>\r\nimport { ref, reactive, onMounted, nextTick } from 'vue'\r\n\r\nconst counters = reactive([])\r\nconst counterElements = ref([])\r\n\r\nasync function loadCounterData() {\r\n  try {\r\n    const res = await fetch('/data/counterSection.txt')\r\n    const text = await res.text()\r\n\r\n    const entries = text.trim().split(/\\n\\s*\\n/)\r\n    entries.forEach((block) => {\r\n      const entry = { current: 0 }\r\n      block.split('\\n').forEach(line => {\r\n        const [key, value] = line.split('=')\r\n        const k = key?.trim()\r\n        const v = value?.trim()\r\n        if (!k || !v) return\r\n        entry[k] = ['to', 'speed'].includes(k) ? Number(v) : v\r\n      })\r\n      counters.push(entry)\r\n    })\r\n  } catch (err) {\r\n    console.error('Failed to load counters:', err)\r\n  }\r\n}\r\n\r\nfunction startCounting(index) {\r\n  const counter = counters[index]\r\n  const { to, speed } = counter\r\n  const startTime = performance.now()\r\n\r\n  const tick = now => {\r\n    const progress = Math.min((now - startTime) / speed, 1)\r\n    counter.current = Math.floor(progress * to)\r\n    if (progress < 1) requestAnimationFrame(tick)\r\n  }\r\n\r\n  requestAnimationFrame(tick)\r\n}\r\n\r\nonMounted(async () => {\r\n  await loadCounterData()\r\n  await nextTick()\r\n\r\n  // Initialize the counterElements ref\r\n  counterElements.value.forEach((el, idx) => {\r\n    if (el) {\r\n      const observer = new IntersectionObserver(\r\n        ([entry], obs) => {\r\n          if (entry.isIntersecting) {\r\n            startCounting(idx)\r\n            obs.unobserve(entry.target)\r\n          }\r\n        },\r\n        { threshold: 0.5 }\r\n      )\r\n      observer.observe(el)\r\n    }\r\n  })\r\n})\r\n</script>\r\n\r\n<style scoped>\r\n/* Optional scoped styles */\r\n</style>\r\n"],"version":3}