{"file":"GlobalSection-CMCYOAVe.js","mappings":";;;;;;;;;;;;AAwCE,UAAM,cAAc,IAAI,IAAI;AAC5B,UAAM,SAAS,IAAI,KAAK;;;;;;;;;;;;;;;;;;;","names":[],"sources":["../../../../components/GlobalSection.vue"],"sourcesContent":["  <template>\r\n    <section v-if=\"loaded && sectionData\">\r\n      <div class=\"container-fluid\">\r\n        <div class=\"row align-items-center min-vh-50 bg-primary-clip\">\r\n          <!-- Text Content -->\r\n          <div class=\"col-lg-6 px-5\">\r\n            <h1 class=\"display-5 fw-bold mb-3 text-white\">{{ sectionData.heading }}</h1>\r\n            <p class=\"lead text-white\">{{ sectionData.subheading }}</p>\r\n          </div>\r\n          <!-- Image Content -->\r\n          <div class=\"col-lg-6 p-0\">\r\n            <img\r\n              :src=\"sectionData.imageSrc\"\r\n              :alt=\"sectionData.imageAlt\"\r\n              :title=\"sectionData.imageTitle\"\r\n              :loading=\"sectionData.imageLoading || 'lazy'\"\r\n              class=\"img-fluid object-fit-cover clip-img\"\r\n            />\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </section>\r\n\r\n    <div v-else-if=\"loaded\" class=\"text-center p-5 text-danger\">\r\n      Failed to load content.\r\n    </div>\r\n\r\n    <div v-else class=\"text-center p-5 text-muted\">\r\n      Loading...\r\n    </div>\r\n  </template>\r\n\r\n  <script setup>\r\n  import { ref, onMounted } from 'vue'\r\n\r\n  const props = defineProps({\r\n    fileName: { type: String, required: true },\r\n    sectionKey: { type: [String, Number], required: true } // Handle any type\r\n  })\r\n\r\n  const sectionData = ref(null)\r\n  const loaded = ref(false)\r\n\r\n  onMounted(async () => {\r\n    try {\r\n      const response = await fetch(`/data/${props.fileName}`)\r\n      if (!response.ok) throw new Error(`Fetch error: ${response.status} ${response.statusText}`)\r\n\r\n      const text = await response.text()\r\n      const lines = text.split(';').map(line => line.trim()).filter(Boolean)\r\n\r\n      // Normalize section keys for case-insensitive comparison\r\n      const targetKey = String(props.sectionKey).toLowerCase()\r\n      const sectionLine = lines.find(line => line.toLowerCase().startsWith(`${targetKey}=`))\r\n\r\n      if (!sectionLine) throw new Error(`Section \"${props.sectionKey}\" not found in ${props.fileName}`)\r\n\r\n      const [, rawContent] = sectionLine.split('=')\r\n      const entries = rawContent.split(',').map(item => item.trim())\r\n\r\n      const parsed = {}\r\n      for (const entry of entries) {\r\n        const [key, value] = entry.split('|')\r\n        if (!key || !value) {\r\n          console.warn(`Invalid entry skipped: \"${entry}\"`)\r\n          continue\r\n        }\r\n        parsed[key.trim()] = value.trim()\r\n      }\r\n\r\n      if (!parsed.heading || !parsed.imageSrc) {\r\n        throw new Error(`Incomplete data for section: ${props.sectionKey}`)\r\n      }\r\n\r\n      sectionData.value = parsed\r\n    } catch (error) {\r\n      console.error(`Failed to load section \"${props.sectionKey}\":`, error.message)\r\n    } finally {\r\n      loaded.value = true\r\n    }\r\n  })\r\n  </script>\r\n\r\n  <style scoped>\r\n  .bg-primary-clip {\r\n    background: linear-gradient(to right, var(--theme-color), #004080);\r\n  }\r\n\r\n  .clip-img {\r\n    object-fit: cover;\r\n    width: 100%;\r\n    height: 100%;\r\n  }\r\n  </style>\r\n"],"version":3}