{"file":"index.vue.mjs","mappings":";;;;;;;;;;;;;;;;;;;AA2CM,UAAA,EAAE,QAAQ,IAAI,cAAc;;;;;;;;;;;;;;;;;;;;;;;;;;","names":[],"sources":["../../../../pages/index.vue"],"sourcesContent":["<template>\r\n  <div>     \r\n    <PageLoader :show=\"loading\" />\r\n    <div v-show=\"!loading\">\r\n      <Header />\r\n      <CarouselSlide />\r\n      <AboutArea />\r\n      <AboutServices />\r\n      <OurVision />\r\n      <SafetyPolicy />\r\n      <CounterSection />\r\n      <TeamArea />\r\n      <VideoArea />\r\n      <PartnerArea />\r\n      <Footer />\r\n    <!-- \r\n    <ServiceArea /> \r\n    <PortfolioArea/>\r\n   <ChooseArea/>\r\n<QuoteArea/>\r\n   \r\n      <ProcessSection />\r\n    <FaqArea/>\r\n   <BlogArea/> --> \r\n  </div>\r\n</div>\r\n</template>\r\n\r\n<script setup>\r\nimport { ref, onMounted, nextTick } from 'vue'\r\nimport PageLoader from '~/components/pageLoader/PageLoader.vue'\r\nimport Header from '~/components/pageHeader/Header.vue'\r\nimport CarouselSlide from '~/components/homePage/CarouselSlide.vue'\r\nimport AboutServices from '~/components/homePage/AboutServices.vue'\r\nimport AboutArea from '~/components/homePage/AboutArea.vue'\r\nimport  OurVision from '~/components/homePage/OurVision.vue'\r\nimport SafetyPolicy from '~/components/homePage/SafetyPolicy.vue'\r\nimport CounterSection from '~/components/homePage/CounterSection.vue'\r\nimport TeamArea from '~/components/homePage/TeamArea.vue'\r\nimport VideoArea from '~/components/homePage/VideoArea.vue'\r\nimport PartnerArea from '~/components/homePage/PartnerArea.vue'\r\nimport Footer from '~/components/pageFooter/Footer.vue'\r\n\r\nconst { loading } = usePageLoader()\r\n\r\nonMounted(async () => {\r\n  // Wait for DOM rendering\r\n  await nextTick()\r\n\r\n  // Wait for all images to load\r\n  await waitForAllImages()\r\n\r\n  // Optional: delay to smooth UX\r\n  setTimeout(() => {\r\n    loading.value = false\r\n  }, 300)\r\n})\r\n\r\nfunction waitForAllImages() {\r\n  const images = Array.from(document.images)\r\n  const unloaded = images.filter(img => !img.complete)\r\n\r\n  if (!unloaded.length) return Promise.resolve()\r\n\r\n  return Promise.all(\r\n    unloaded.map(\r\n      img =>\r\n        new Promise(resolve => {\r\n          img.onload = img.onerror = resolve\r\n        })\r\n    )\r\n  )\r\n}\r\n</script>\r\n"],"version":3}